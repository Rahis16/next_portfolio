{
    "sourceFile": "app/hooks/useSectionObserver.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1751023490132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751023904925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+\"use client\";\r\n+\r\n+import { useEffect, useState } from \"react\";\r\n+\r\n+export function useSectionObserver() {\r\n+  const [activeSection, setActiveSection] = useState(\"#about\");\r\n+  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n+\r\n+  useEffect(() => {\r\n+    const observers = new Map();\r\n+    const sections = document.querySelectorAll(\"section\");\r\n+\r\n+    sections.forEach((section) => {\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          entries.forEach((entry) => {\r\n+            if (entry.isIntersecting) {\r\n+              setActiveSection(`#${entry.target.id}`);\r\n+              setIsVisible((prev) => ({\r\n+                ...prev,\r\n+                [entry.target.id]: true,\r\n+              }));\r\n+            }\r\n+          });\r\n+        },\r\n+        { threshold: 0.3 }\r\n+      );\r\n+\r\n+      observer.observe(section);\r\n+      observers.set(section.id, observer);\r\n+    });\r\n+\r\n+    return () => {\r\n+      observers.forEach((observer) => observer.disconnect());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return { activeSection, isVisible };\r\n+}\r\n"
                },
                {
                    "date": 1751023994849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+// components/SectionObserverProvider.tsx\r\n+\"use client\";\r\n+\r\n+import React, { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\r\n+\r\n+type VisibilityContextType = {\r\n+  activeSection: string;\r\n+  isVisible: { [key: string]: boolean };\r\n+};\r\n+\r\n+const SectionVisibilityContext = createContext<VisibilityContextType | undefined>(undefined);\r\n+\r\n+export function useSectionObserver() {\r\n+  const context = useContext(SectionVisibilityContext);\r\n+  if (!context) {\r\n+    throw new Error(\"useSectionObserver must be used within a SectionObserverProvider\");\r\n+  }\r\n+  return context;\r\n+}\r\n+\r\n+type Props = {\r\n+  children: ReactNode;\r\n+};\r\n+\r\n+export function SectionObserverProvider({ children }: Props) {\r\n+  const [activeSection, setActiveSection] = useState(\"#about\");\r\n+  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n+\r\n+  useEffect(() => {\r\n+    const observers = new Map<Element, IntersectionObserver>();\r\n+    const sections = document.querySelectorAll(\"section\");\r\n+\r\n+    sections.forEach((section) => {\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          entries.forEach((entry) => {\r\n+            if (entry.isIntersecting) {\r\n+              setActiveSection(`#${entry.target.id}`);\r\n+              setIsVisible((prev) => ({\r\n+                ...prev,\r\n+                [entry.target.id]: true,\r\n+              }));\r\n+            }\r\n+          });\r\n+        },\r\n+        { threshold: 0.3 }\r\n+      );\r\n+      observer.observe(section);\r\n+      observers.set(section, observer);\r\n+    });\r\n+\r\n+    return () => {\r\n+      observers.forEach((observer) => observer.disconnect());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <SectionVisibilityContext.Provider value={{ activeSection, isVisible }}>\r\n+      {children}\r\n+    </SectionVisibilityContext.Provider>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751024108363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,140 +1,29 @@\n-// components/SectionObserverProvider.tsx\r\n \"use client\";\r\n \r\n-import React, { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\r\n+import React, { createContext, useContext, ReactNode, useState } from \"react\";\r\n \r\n-type VisibilityContextType = {\r\n-  activeSection: string;\r\n-  isVisible: { [key: string]: boolean };\r\n+type ContextType = {\r\n+  foo: string;\r\n };\r\n \r\n-const SectionVisibilityContext = createContext<VisibilityContextType | undefined>(undefined);\r\n+const TestContext = createContext<ContextType | undefined>(undefined);\r\n \r\n-export function useSectionObserver() {\r\n-  const context = useContext(SectionVisibilityContext);\r\n-  if (!context) {\r\n-    throw new Error(\"useSectionObserver must be used within a SectionObserverProvider\");\r\n-  }\r\n-  return context;\r\n+function TestProvider({ children }: { children: ReactNode }) {\r\n+  const [foo] = useState(\"bar\");\r\n+\r\n+  return <TestContext.Provider value={{ foo }}>{children}</TestContext.Provider>;\r\n }\r\n \r\n-type Props = {\r\n-  children: ReactNode;\r\n-};\r\n+function TestConsumer() {\r\n+  const context = useContext(TestContext);\r\n+  if (!context) throw new Error(\"Missing context!\");\r\n+  return <div>{context.foo}</div>;\r\n+}\r\n \r\n-export function SectionObserverProvider({ children }: Props) {\r\n-  const [activeSection, setActiveSection] = useState(\"#about\");\r\n-  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n-\r\n-  useEffect(() => {\r\n-    const observers = new Map<Element, IntersectionObserver>();\r\n-    const sections = document.querySelectorAll(\"section\");\r\n-\r\n-    sections.forEach((section) => {\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          entries.forEach((entry) => {\r\n-            if (entry.isIntersecting) {\r\n-              setActiveSection(`#${entry.target.id}`);\r\n-              setIsVisible((prev) => ({\r\n-                ...prev,\r\n-                [entry.target.id]: true,\r\n-              }));\r\n-            }\r\n-          });\r\n-        },\r\n-        { threshold: 0.3 }\r\n-      );\r\n-      observer.observe(section);\r\n-      observers.set(section, observer);\r\n-    });\r\n-\r\n-    return () => {\r\n-      observers.forEach((observer) => observer.disconnect());\r\n-    };\r\n-  }, []);\r\n-\r\n+export default function TestApp() {\r\n   return (\r\n-    <SectionVisibilityContext.Provider value={{ activeSection, isVisible }}>\r\n-      {children}\r\n-    </SectionVisibilityContext.Provider>\r\n+    <TestProvider>\r\n+      <TestConsumer />\r\n+    </TestProvider>\r\n   );\r\n }\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-\r\n-export function useSectionObserver() {\r\n-  const [activeSection, setActiveSection] = useState(\"#about\");\r\n-  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n-\r\n-  useEffect(() => {\r\n-    const observers = new Map();\r\n-    const sections = document.querySelectorAll(\"section\");\r\n-\r\n-    sections.forEach((section) => {\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          entries.forEach((entry) => {\r\n-            if (entry.isIntersecting) {\r\n-              setActiveSection(`#${entry.target.id}`);\r\n-              setIsVisible((prev) => ({\r\n-                ...prev,\r\n-                [entry.target.id]: true,\r\n-              }));\r\n-            }\r\n-          });\r\n-        },\r\n-        { threshold: 0.3 }\r\n-      );\r\n-\r\n-      observer.observe(section);\r\n-      observers.set(section.id, observer);\r\n-    });\r\n-\r\n-    return () => {\r\n-      observers.forEach((observer) => observer.disconnect());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return { activeSection, isVisible };\r\n-}\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-\r\n-export function useSectionObserver() {\r\n-  const [activeSection, setActiveSection] = useState(\"#about\");\r\n-  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n-\r\n-  useEffect(() => {\r\n-    const observers = new Map();\r\n-    const sections = document.querySelectorAll(\"section\");\r\n-\r\n-    sections.forEach((section) => {\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          entries.forEach((entry) => {\r\n-            if (entry.isIntersecting) {\r\n-              setActiveSection(`#${entry.target.id}`);\r\n-              setIsVisible((prev) => ({\r\n-                ...prev,\r\n-                [entry.target.id]: true,\r\n-              }));\r\n-            }\r\n-          });\r\n-        },\r\n-        { threshold: 0.3 }\r\n-      );\r\n-\r\n-      observer.observe(section);\r\n-      observers.set(section.id, observer);\r\n-    });\r\n-\r\n-    return () => {\r\n-      observers.forEach((observer) => observer.disconnect());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return { activeSection, isVisible };\r\n-}\r\n"
                },
                {
                    "date": 1751024302566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,39 @@\n \"use client\";\r\n \r\n-import React, { createContext, useContext, ReactNode, useState } from \"react\";\r\n+import { useEffect, useState } from \"react\";\r\n \r\n-type ContextType = {\r\n-  foo: string;\r\n-};\r\n+export function useSectionObserver() {\r\n+  const [activeSection, setActiveSection] = useState(\"#about\");\r\n+  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n \r\n-const TestContext = createContext<ContextType | undefined>(undefined);\r\n+  useEffect(() => {\r\n+    const observers = new Map();\r\n+    const sections = document.querySelectorAll(\"section\");\r\n \r\n-function TestProvider({ children }: { children: ReactNode }) {\r\n-  const [foo] = useState(\"bar\");\r\n+    sections.forEach((section) => {\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          entries.forEach((entry) => {\r\n+            if (entry.isIntersecting) {\r\n+              setActiveSection(`#${entry.target.id}`);\r\n+              setIsVisible((prev) => ({\r\n+                ...prev,\r\n+                [entry.target.id]: true,\r\n+              }));\r\n+            }\r\n+          });\r\n+        },\r\n+        { threshold: 0.3 }\r\n+      );\r\n \r\n-  return <TestContext.Provider value={{ foo }}>{children}</TestContext.Provider>;\r\n-}\r\n+      observer.observe(section);\r\n+      observers.set(section.id, observer);\r\n+    });\r\n \r\n-function TestConsumer() {\r\n-  const context = useContext(TestContext);\r\n-  if (!context) throw new Error(\"Missing context!\");\r\n-  return <div>{context.foo}</div>;\r\n-}\r\n+    return () => {\r\n+      observers.forEach((observer) => observer.disconnect());\r\n+    };\r\n+  }, []);\r\n \r\n-export default function TestApp() {\r\n-  return (\r\n-    <TestProvider>\r\n-      <TestConsumer />\r\n-    </TestProvider>\r\n-  );\r\n+  return { activeSection, isVisible };\r\n }\r\n"
                },
                {
                    "date": 1751024377661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+// components/SectionObserverWrapper.tsx\r\n+\"use client\";\r\n+\r\n+import React, { useEffect, useState, ReactNode } from \"react\";\r\n+\r\n+type SectionObserverWrapperProps = {\r\n+  children: (props: {\r\n+    activeSection: string;\r\n+    isVisible: { [key: string]: boolean };\r\n+  }) => ReactNode;\r\n+};\r\n+\r\n+export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps) {\r\n+  const [activeSection, setActiveSection] = useState(\"#about\");\r\n+  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n+\r\n+  useEffect(() => {\r\n+    const observers = new Map<Element, IntersectionObserver>();\r\n+    const sections = document.querySelectorAll(\"section\");\r\n+\r\n+    sections.forEach((section) => {\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          entries.forEach((entry) => {\r\n+            if (entry.isIntersecting) {\r\n+              setActiveSection(`#${entry.target.id}`);\r\n+              setIsVisible((prev) => ({\r\n+                ...prev,\r\n+                [entry.target.id]: true,\r\n+              }));\r\n+            }\r\n+          });\r\n+        },\r\n+        { threshold: 0.3 }\r\n+      );\r\n+\r\n+      observer.observe(section);\r\n+      observers.set(section, observer);\r\n+    });\r\n+\r\n+    return () => {\r\n+      observers.forEach((observer) => observer.disconnect());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return <>{children({ activeSection, isVisible })}</>;\r\n+}\r\n"
                },
                {
                    "date": 1751024388047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,45 +42,6 @@\n       observers.forEach((observer) => observer.disconnect());\r\n     };\r\n   }, []);\r\n \r\n-  return <>{children({ activeSection, isVisible })}</>;\r\n+  return <>{children({ activeSection, isVisible } as { activeSection: string; isVisible: { [key: string]: boolean } })}</>;\r\n }\r\n-\"use client\";\r\n-\r\n-import { useEffect, useState } from \"react\";\r\n-\r\n-export function useSectionObserver() {\r\n-  const [activeSection, setActiveSection] = useState(\"#about\");\r\n-  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n-\r\n-  useEffect(() => {\r\n-    const observers = new Map();\r\n-    const sections = document.querySelectorAll(\"section\");\r\n-\r\n-    sections.forEach((section) => {\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          entries.forEach((entry) => {\r\n-            if (entry.isIntersecting) {\r\n-              setActiveSection(`#${entry.target.id}`);\r\n-              setIsVisible((prev) => ({\r\n-                ...prev,\r\n-                [entry.target.id]: true,\r\n-              }));\r\n-            }\r\n-          });\r\n-        },\r\n-        { threshold: 0.3 }\r\n-      );\r\n-\r\n-      observer.observe(section);\r\n-      observers.set(section.id, observer);\r\n-    });\r\n-\r\n-    return () => {\r\n-      observers.forEach((observer) => observer.disconnect());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return { activeSection, isVisible };\r\n-}\r\n"
                },
                {
                    "date": 1751024402758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,6 +42,6 @@\n       observers.forEach((observer) => observer.disconnect());\r\n     };\r\n   }, []);\r\n \r\n-  return <>{children({ activeSection, isVisible } as { activeSection: string; isVisible: { [key: string]: boolean } })}</>;\r\n+  return <>{children({ activeSection, isVisible })}</>;\r\n }\r\n"
                },
                {
                    "date": 1751024471201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,6 +42,6 @@\n       observers.forEach((observer) => observer.disconnect());\r\n     };\r\n   }, []);\r\n \r\n-  return <>{children({ activeSection, isVisible })}</>;\r\n+  return {children({ activeSection, isVisible })}</>;\r\n }\r\n"
                },
                {
                    "date": 1751024502361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n     isVisible: { [key: string]: boolean };\r\n   }) => ReactNode;\r\n };\r\n \r\n-export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps) {\r\n-  const [activeSection, setActiveSection] = useState(\"#about\");\r\n+export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps): React.ReactElement {\r\n+  const [activeSection, setActiveSection] = useState<string>(\"#about\");\r\n   const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n \r\n   useEffect(() => {\r\n     const observers = new Map<Element, IntersectionObserver>();\r\n@@ -42,6 +42,6 @@\n       observers.forEach((observer) => observer.disconnect());\r\n     };\r\n   }, []);\r\n \r\n-  return {children({ activeSection, isVisible })}</>;\r\n+  return <>{children({ activeSection, isVisible })}</>;\r\n }\r\n"
                },
                {
                    "date": 1751024562562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,19 @@\n-// components/SectionObserverWrapper.tsx\r\n \"use client\";\r\n \r\n-import React, { useEffect, useState, ReactNode } from \"react\";\r\n+import React, { useEffect, useState } from \"react\";\r\n \r\n+type ObserverValues = {\r\n+  activeSection: string;\r\n+  isVisible: { [key: string]: boolean };\r\n+};\r\n+\r\n type SectionObserverWrapperProps = {\r\n-  children: (props: {\r\n-    activeSection: string;\r\n-    isVisible: { [key: string]: boolean };\r\n-  }) => ReactNode;\r\n+  children: (props: ObserverValues) => React.ReactElement;\r\n };\r\n \r\n-export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps): React.ReactElement {\r\n-  const [activeSection, setActiveSection] = useState<string>(\"#about\");\r\n+export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps) {\r\n+  const [activeSection, setActiveSection] = useState(\"#about\");\r\n   const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n \r\n   useEffect(() => {\r\n     const observers = new Map<Element, IntersectionObserver>();\r\n@@ -42,6 +43,7 @@\n       observers.forEach((observer) => observer.disconnect());\r\n     };\r\n   }, []);\r\n \r\n-  return <>{children({ activeSection, isVisible })}</>;\r\n+  // ✅ THIS is safe now, because we told TypeScript that children is a function\r\n+  return children({ activeSection, isVisible });\r\n }\r\n"
                },
                {
                    "date": 1751024579449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,18 @@\n+// components/SectionObserverWrapper.tsx\r\n \"use client\";\r\n \r\n-import React, { useEffect, useState } from \"react\";\r\n-\r\n+import React, { useEffect, useState, ReactNode } from \"react\";\r\n type ObserverValues = {\r\n   activeSection: string;\r\n   isVisible: { [key: string]: boolean };\r\n };\r\n \r\n type SectionObserverWrapperProps = {\r\n-  children: (props: ObserverValues) => React.ReactElement;\r\n+  children: (props: {\r\n+    activeSection: string;\r\n+    isVisible: { [key: string]: boolean };\r\n+  }) => ReactNode;\r\n };\r\n \r\n export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps) {\r\n   const [activeSection, setActiveSection] = useState(\"#about\");\r\n@@ -43,7 +46,6 @@\n       observers.forEach((observer) => observer.disconnect());\r\n     };\r\n   }, []);\r\n \r\n-  // ✅ THIS is safe now, because we told TypeScript that children is a function\r\n-  return children({ activeSection, isVisible });\r\n+  return {children({ activeSection, isVisible })};\r\n }\r\n"
                },
                {
                    "date": 1751024584476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,8 @@\n // components/SectionObserverWrapper.tsx\r\n \"use client\";\r\n \r\n import React, { useEffect, useState, ReactNode } from \"react\";\r\n-type ObserverValues = {\r\n-  activeSection: string;\r\n-  isVisible: { [key: string]: boolean };\r\n-};\r\n \r\n type SectionObserverWrapperProps = {\r\n   children: (props: {\r\n     activeSection: string;\r\n"
                },
                {
                    "date": 1751024590307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n-// components/SectionObserverWrapper.tsx\r\n \"use client\";\r\n \r\n-import React, { useEffect, useState, ReactNode } from \"react\";\r\n+import React, { useEffect, useState } from \"react\";\r\n \r\n+type ObserverValues = {\r\n+  activeSection: string;\r\n+  isVisible: { [key: string]: boolean };\r\n+};\r\n+\r\n type SectionObserverWrapperProps = {\r\n-  children: (props: {\r\n-    activeSection: string;\r\n-    isVisible: { [key: string]: boolean };\r\n-  }) => ReactNode;\r\n+  children: (props: ObserverValues) => React.ReactElement;\r\n };\r\n \r\n export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps) {\r\n   const [activeSection, setActiveSection] = useState(\"#about\");\r\n@@ -42,6 +43,7 @@\n       observers.forEach((observer) => observer.disconnect());\r\n     };\r\n   }, []);\r\n \r\n-  return {children({ activeSection, isVisible })};\r\n+  // ✅ THIS is safe now, because we told TypeScript that children is a function\r\n+  return children({ activeSection, isVisible });\r\n }\r\n"
                },
                {
                    "date": 1751024767573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+// components/SectionObserverProvider.tsx\r\n+\"use client\";\r\n+\r\n+import React, { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\r\n+\r\n+type VisibilityContextType = {\r\n+  activeSection: string;\r\n+  isVisible: { [key: string]: boolean };\r\n+};\r\n+\r\n+const SectionVisibilityContext = createContext<VisibilityContextType | null>(null);\r\n+\r\n+export function useSectionObserver() {\r\n+  const context = useContext(SectionVisibilityContext);\r\n+  if (!context) {\r\n+    throw new Error(\"useSectionObserver must be used within SectionObserverProvider\");\r\n+  }\r\n+  return context;\r\n+}\r\n+\r\n+export function SectionObserverProvider({ children }: { children: ReactNode }) {\r\n+  const [activeSection, setActiveSection] = useState(\"#about\");\r\n+  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n+\r\n+  useEffect(() => {\r\n+    const observers = new Map<Element, IntersectionObserver>();\r\n+    const sections = document.querySelectorAll(\"section\");\r\n+\r\n+    sections.forEach((section) => {\r\n+      const observer = new IntersectionObserver(\r\n+        (entries) => {\r\n+          entries.forEach((entry) => {\r\n+            if (entry.isIntersecting) {\r\n+              setActiveSection(`#${entry.target.id}`);\r\n+              setIsVisible((prev) => ({\r\n+                ...prev,\r\n+                [entry.target.id]: true,\r\n+              }));\r\n+            }\r\n+          });\r\n+        },\r\n+        { threshold: 0.3 }\r\n+      );\r\n+\r\n+      observer.observe(section);\r\n+      observers.set(section, observer);\r\n+    });\r\n+\r\n+    return () => {\r\n+      observers.forEach((observer) => observer.disconnect());\r\n+    };\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <SectionVisibilityContext.Provider value={{ activeSection, isVisible }}>\r\n+      {children}\r\n+    </SectionVisibilityContext.Provider>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751024776971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,78 +1,18 @@\n-// components/SectionObserverProvider.tsx\r\n+// components/SectionObserverWrapper.tsx\r\n \"use client\";\r\n \r\n-import React, { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\r\n+import React, { useEffect, useState, ReactNode } from \"react\";\r\n \r\n-type VisibilityContextType = {\r\n-  activeSection: string;\r\n-  isVisible: { [key: string]: boolean };\r\n-};\r\n-\r\n-const SectionVisibilityContext = createContext<VisibilityContextType | null>(null);\r\n-\r\n-export function useSectionObserver() {\r\n-  const context = useContext(SectionVisibilityContext);\r\n-  if (!context) {\r\n-    throw new Error(\"useSectionObserver must be used within SectionObserverProvider\");\r\n-  }\r\n-  return context;\r\n-}\r\n-\r\n-export function SectionObserverProvider({ children }: { children: ReactNode }) {\r\n-  const [activeSection, setActiveSection] = useState(\"#about\");\r\n-  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n-\r\n-  useEffect(() => {\r\n-    const observers = new Map<Element, IntersectionObserver>();\r\n-    const sections = document.querySelectorAll(\"section\");\r\n-\r\n-    sections.forEach((section) => {\r\n-      const observer = new IntersectionObserver(\r\n-        (entries) => {\r\n-          entries.forEach((entry) => {\r\n-            if (entry.isIntersecting) {\r\n-              setActiveSection(`#${entry.target.id}`);\r\n-              setIsVisible((prev) => ({\r\n-                ...prev,\r\n-                [entry.target.id]: true,\r\n-              }));\r\n-            }\r\n-          });\r\n-        },\r\n-        { threshold: 0.3 }\r\n-      );\r\n-\r\n-      observer.observe(section);\r\n-      observers.set(section, observer);\r\n-    });\r\n-\r\n-    return () => {\r\n-      observers.forEach((observer) => observer.disconnect());\r\n-    };\r\n-  }, []);\r\n-\r\n-  return (\r\n-    <SectionVisibilityContext.Provider value={{ activeSection, isVisible }}>\r\n-      {children}\r\n-    </SectionVisibilityContext.Provider>\r\n-  );\r\n-}\r\n-\"use client\";\r\n-\r\n-import React, { useEffect, useState } from \"react\";\r\n-\r\n-type ObserverValues = {\r\n-  activeSection: string;\r\n-  isVisible: { [key: string]: boolean };\r\n-};\r\n-\r\n type SectionObserverWrapperProps = {\r\n-  children: (props: ObserverValues) => React.ReactElement;\r\n+  children: (props: {\r\n+    activeSection: string;\r\n+    isVisible: { [key: string]: boolean };\r\n+  }) => ReactNode;\r\n };\r\n \r\n-export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps) {\r\n-  const [activeSection, setActiveSection] = useState(\"#about\");\r\n+export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps): React.ReactElement {\r\n+  const [activeSection, setActiveSection] = useState<string>(\"#about\");\r\n   const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n \r\n   useEffect(() => {\r\n     const observers = new Map<Element, IntersectionObserver>();\r\n@@ -102,7 +42,6 @@\n       observers.forEach((observer) => observer.disconnect());\r\n     };\r\n   }, []);\r\n \r\n-  // ✅ THIS is safe now, because we told TypeScript that children is a function\r\n-  return children({ activeSection, isVisible });\r\n+  return <>{children({ activeSection, isVisible })}</>;\r\n }\r\n"
                },
                {
                    "date": 1751024784045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,14 @@\n-// components/SectionObserverWrapper.tsx\r\n \"use client\";\r\n \r\n-import React, { useEffect, useState, ReactNode } from \"react\";\r\n+import { useEffect, useState } from \"react\";\r\n \r\n-type SectionObserverWrapperProps = {\r\n-  children: (props: {\r\n-    activeSection: string;\r\n-    isVisible: { [key: string]: boolean };\r\n-  }) => ReactNode;\r\n-};\r\n-\r\n-export default function SectionObserverWrapper({ children }: SectionObserverWrapperProps): React.ReactElement {\r\n-  const [activeSection, setActiveSection] = useState<string>(\"#about\");\r\n+export function useSectionObserver() {\r\n+  const [activeSection, setActiveSection] = useState(\"#about\");\r\n   const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n \r\n   useEffect(() => {\r\n-    const observers = new Map<Element, IntersectionObserver>();\r\n+    const observers = new Map();\r\n     const sections = document.querySelectorAll(\"section\");\r\n \r\n     sections.forEach((section) => {\r\n       const observer = new IntersectionObserver(\r\n@@ -34,14 +26,14 @@\n         { threshold: 0.3 }\r\n       );\r\n \r\n       observer.observe(section);\r\n-      observers.set(section, observer);\r\n+      observers.set(section.id, observer);\r\n     });\r\n \r\n     return () => {\r\n       observers.forEach((observer) => observer.disconnect());\r\n     };\r\n   }, []);\r\n \r\n-  return <>{children({ activeSection, isVisible })}</>;\r\n+  return { activeSection, isVisible };\r\n }\r\n"
                }
            ],
            "date": 1751023490132,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport function useSectionObserver() {\r\n  const [activeSection, setActiveSection] = useState(\"#about\");\r\n  const [isVisible, setIsVisible] = useState<{ [key: string]: boolean }>({});\r\n\r\n  useEffect(() => {\r\n    const observers = new Map();\r\n    const sections = document.querySelectorAll(\"section\");\r\n\r\n    sections.forEach((section) => {\r\n      const observer = new IntersectionObserver(\r\n        (entries) => {\r\n          entries.forEach((entry) => {\r\n            if (entry.isIntersecting) {\r\n              setActiveSection(`#${entry.target.id}`);\r\n              setIsVisible((prev) => ({\r\n                ...prev,\r\n                [entry.target.id]: true,\r\n              }));\r\n            }\r\n          });\r\n        },\r\n        { threshold: 0.3 }\r\n      );\r\n\r\n      observer.observe(section);\r\n      observers.set(section.id, observer);\r\n    });\r\n\r\n    return () => {\r\n      observers.forEach((observer) => observer.disconnect());\r\n    };\r\n  }, []);\r\n\r\n  return { activeSection, isVisible };\r\n}\r\n"
        }
    ]
}